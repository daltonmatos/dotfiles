" vim: foldmethod=marker foldlevel=2
" General Settings {{{3
set nocompatible
let mapleader="\<Space>"
set rtp+=~/.vim/bundle/Vundle.vim/
set wildignore+=*.py~,build/*.*,*.class,*.pyc,__pycache__*

" Helps when <tab> completing strings on vim's command line
set wildmenu
set wildmode=list:longest
set backupdir=/tmp,~/.vim/.backups,.
set t_Co=256
set guioptions-=T
set guioptions-=m
" Não redimenciona outras janelas quando algum split é fechado
set noequalalways

set backspace=indent,eol,start

set nosplitbelow
set backup		" keep a backup file
set history=128		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set number
set laststatus=2 "every window will show the statusline
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set hlsearch
syntax on

set ts=2
set sw=2
set et

filetype plugin indent on
set autoindent
set autoread

set swapfile
set background=dark
if has('termguicolors')
  set termguicolors
endif

set noerrorbells
set vb t_vb=

set completeopt=menu,menuone,preview,noselect,noinsert

" http://input.fontbureau.com/
set guifont=Input\ Regular\ 12
" }}} General Settings "

nnoremap ; :

" Complete reference about what do you get with this vimrc {{{3
" Basic Docs about installed plugins
"
"
"
" Finding things
"
" <leader>a Searches for the word under cursor wit Ack (All files under
" current directory)
" <leader>la Does the same but only on current file
" Both work for currently selected string
"
" CTRL-F on insert mode uses Ack to find word under cursos (all files)
"
" Managing Buffers
"
" <leader>b Opens the Buffer manager window, where you can open/delete buffers
"
" How to use some plugins
"
" vim-scripts/Merginal
" Inside branch list window
" * cc Checkout selected branch
" * A Create a new branch based on currently checked out branch
" * M merge branch under cursor with current checked out branch
" * rn Prompt to renamea branch under cursor
"
" tpope/vim-fugitive
" Inside fugitive window
" cc Commit current files
" ca Commit ammend (can edit commit message)
" cA Commit ammend with current commit message
" dp Display unified diff of file
"
" }}} Complete reference about what do you get with this vimrc "

function! SourceFileIfExist(filename)
  let l:extra_file = fnamemodify(expand($MYVIMRC), ':p:h') . '/' . a:filename
  if filereadable(l:extra_file)
    execute ':so ' . l:extra_file
  endif
endfunc

call SourceFileIfExist('ale.vim')

" Plugin installation {{{2

call vundle#begin()

" Dependency for idanarye/vim-vebugger
Plugin 'Shougo/vimproc.vim', {'do' : 'make'}

Plugin 'vim-ctrlspace/vim-ctrlspace'

" Dependenxy to janko-m/vim-test
Plugin 'tpope/vim-dispatch'

" Dependencies for sirver/ultisnips
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'honza/vim-snippets'


Plugin 'ervandew/supertab'

" Syntax plugins
Plugin 'cespare/vim-toml'
Plugin 'ekalinin/Dockerfile.vim'

" Plugins

Plugin 'sirver/ultisnips'

Plugin 'bling/vim-airline'

Plugin 'jreybert/vimagit'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-unimpaired'
Plugin 'vim-scripts/surround.vim'
Plugin 'matze/vim-move'
Plugin 'myusuf3/numbers.vim'
Plugin 'alvan/vim-closetag'

Plugin 'EinfachToll/DidYouMean'
Plugin 'mhinz/vim-signify'
Plugin 'nathanaelkane/vim-indent-guides' " <leader>ig to toggle visbility
Plugin 'airblade/vim-rooter'
Plugin 'artur-shaik/vim-javacomplete2' " Run mvn complie inside .vim/bundle/vim-javacomplete2/libs/javavi
Plugin 'idanarye/vim-merginal'
Plugin 'elzr/vim-json' " checking for json files, highlighting errors
Plugin 'alfredodeza/pytest.vim'
Plugin 'mileszs/ack.vim'
Plugin 'daltonmatos/vim-virtualenv'
Plugin 'idanarye/vim-vebugger'
Plugin 'gregsexton/gitv'

Plugin 'prabirshrestha/vim-lsp'
Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'prabirshrestha/asyncomplete-lsp.vim'

Plugin 'w0rp/ale'
Plugin 'easymotion/vim-easymotion'

Plugin 'janko-m/vim-test'
"
" ColorSchemes
Plugin 'danielwe/base16-vim'
Plugin 'Addisonbean/Vim-Xcode-Theme'

" Syntax schemes
Plugin 'PotatoesMaster/i3-vim-syntax'

call vundle#end()
" }}} Plugin installation



" Thanks to @denilsonsa (https://github.com/denilsonsa)
function! Salvar_setKeys()
  "Use Ctrl+S to save
  nnoremap <silent> <C-S>      :update<CR>
  vnoremap <silent> <C-S> <C-C>:update<CR>
endfunc

augroup Salvar
  autocmd!
  autocmd GUIEnter * call Salvar_setKeys()
augroup END

colorscheme base16-dracula
" Better colors for the line numbers
highlight LineNr guifg=White

nmap <leader>w <C-W>
nnoremap <leader>wX :wincmd _ \| wincmd \| <CR>
nnoremap <silent> <leader>wr :setlocal wrap!<CR>

" Expand %% (on the command line) to the directory of current file
cnoremap %% <C-R>=expand('%:p:h').'/'<CR>

"Desliga highlight search
nnoremap <leader><space> :nohls <enter>

" set CTRL-G to always show full path of current file when
nnoremap <silent> <C-G>  1<C-G>

nnoremap <leader>q :close<cr>

nnoremap <silent> <leader>bW :bwipe!<CR>

" Copy/Paste from/to clipboard
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>y "+y
vmap <Leader>p "+p
vmap <Leader>P "+P

set statusline+=%#warningmsg#
set statusline+=%*

nnoremap <leader>el :lopen<CR>

" Close the QuickFix/Loc Windows hitting 'q'

augroup QuickCloser
  autocmd!
  autocmd BufWinEnter quickfix nnoremap <buffer> q :close<CR>
  autocmd BufWinEnter quickfix nnoremap <buffer> <ESC> :close<CR>

  autocmd FileType netrw nnoremap <buffer> q :close<CR>
  autocmd FileType netrw nnoremap <buffer> <ESC> :close<CR>
augroup END

noremap <Leader>e :25Lexplore<CR>

" New tab
noremap <C-t> :tabnew<CR>

nnoremap <Leader>v :tabedit $MYVIMRC<cr>
nnoremap <silent> <C-S-PageUP> :tabm -1<CR>
nnoremap <silent> <C-S-PageDOWN> :tabm +1<CR>

call SourceFileIfExist('vimlsp.vim')
call SourceFileIfExist('ack.vim')
call SourceFileIfExist('airline.vim')
call SourceFileIfExist('ale-mappings.vim')
call SourceFileIfExist('closetag.vim')
call SourceFileIfExist('easymotion.vim')
call SourceFileIfExist('git.vim')
call SourceFileIfExist('java.vim')
call SourceFileIfExist('magit.vim')
call SourceFileIfExist('pytest.vim')
call SourceFileIfExist('python.vim')
call SourceFileIfExist('signify.vim')
call SourceFileIfExist('supertab.vim')
call SourceFileIfExist('terminal.vim')
call SourceFileIfExist('ultisnips.vim')
call SourceFileIfExist('vim-ctrlspace.vim')
call SourceFileIfExist('vimmove.vim')
call SourceFileIfExist('vim-rooter.vim')
call SourceFileIfExist('vim-test.vim')
call SourceFileIfExist('terraform.vim')
